# -*- coding: utf-8 -*- 

# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import IndyGeneral_pb2 as IndyGeneral__pb2
import IndyMotion_pb2 as IndyMotion__pb2


class ControlDirectorStub(object):
  """Motion queue managing service definition.
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.changeSpeedRatio = channel.unary_unary(
        '/IndyFramework.rpc.ControlDirector/changeSpeedRatio',
        request_serializer=IndyGeneral__pb2.DoubleMessage.SerializeToString,
        response_deserializer=IndyGeneral__pb2.EmptyMessage.FromString,
        )
    self.enqueueMotion = channel.unary_unary(
        '/IndyFramework.rpc.ControlDirector/enqueueMotion',
        request_serializer=IndyMotion__pb2.Motion.SerializeToString,
        response_deserializer=IndyMotion__pb2.MotionResult.FromString,
        )
    self.enqueueMotionAvailable = channel.unary_unary(
        '/IndyFramework.rpc.ControlDirector/enqueueMotionAvailable',
        request_serializer=IndyMotion__pb2.Motion.SerializeToString,
        response_deserializer=IndyMotion__pb2.MotionResult.FromString,
        )
    self.enqueueMotionAcceptable = channel.unary_unary(
        '/IndyFramework.rpc.ControlDirector/enqueueMotionAcceptable',
        request_serializer=IndyMotion__pb2.Motion.SerializeToString,
        response_deserializer=IndyMotion__pb2.MotionResult.FromString,
        )
    self.enqueuePriorityMotion = channel.unary_unary(
        '/IndyFramework.rpc.ControlDirector/enqueuePriorityMotion',
        request_serializer=IndyMotion__pb2.Motion.SerializeToString,
        response_deserializer=IndyMotion__pb2.MotionResult.FromString,
        )
    self.stopMotion = channel.unary_unary(
        '/IndyFramework.rpc.ControlDirector/stopMotion',
        request_serializer=IndyMotion__pb2.MotionStop.SerializeToString,
        response_deserializer=IndyGeneral__pb2.BooleanMessage.FromString,
        )
    self.enqueueHome = channel.unary_unary(
        '/IndyFramework.rpc.ControlDirector/enqueueHome',
        request_serializer=IndyMotion__pb2.Motion.SerializeToString,
        response_deserializer=IndyMotion__pb2.MotionResult.FromString,
        )
    self.enqueueZero = channel.unary_unary(
        '/IndyFramework.rpc.ControlDirector/enqueueZero',
        request_serializer=IndyMotion__pb2.Motion.SerializeToString,
        response_deserializer=IndyMotion__pb2.MotionResult.FromString,
        )
    self.isMoving = channel.unary_unary(
        '/IndyFramework.rpc.ControlDirector/isMoving',
        request_serializer=IndyGeneral__pb2.EmptyMessage.SerializeToString,
        response_deserializer=IndyGeneral__pb2.BooleanMessage.FromString,
        )
    self.isIdle = channel.unary_unary(
        '/IndyFramework.rpc.ControlDirector/isIdle',
        request_serializer=IndyGeneral__pb2.EmptyMessage.SerializeToString,
        response_deserializer=IndyGeneral__pb2.BooleanMessage.FromString,
        )
    self.isMotionEmpty = channel.unary_unary(
        '/IndyFramework.rpc.ControlDirector/isMotionEmpty',
        request_serializer=IndyGeneral__pb2.EmptyMessage.SerializeToString,
        response_deserializer=IndyGeneral__pb2.BooleanMessage.FromString,
        )
    self.isMotionFull = channel.unary_unary(
        '/IndyFramework.rpc.ControlDirector/isMotionFull',
        request_serializer=IndyGeneral__pb2.EmptyMessage.SerializeToString,
        response_deserializer=IndyGeneral__pb2.BooleanMessage.FromString,
        )
    self.isMotionAcceptable = channel.unary_unary(
        '/IndyFramework.rpc.ControlDirector/isMotionAcceptable',
        request_serializer=IndyMotion__pb2.Motion.SerializeToString,
        response_deserializer=IndyGeneral__pb2.BooleanMessage.FromString,
        )
    self.waitMotionDone = channel.unary_unary(
        '/IndyFramework.rpc.ControlDirector/waitMotionDone',
        request_serializer=IndyGeneral__pb2.EmptyMessage.SerializeToString,
        response_deserializer=IndyGeneral__pb2.BooleanMessage.FromString,
        )
    self.waitMotionAcceptable = channel.unary_unary(
        '/IndyFramework.rpc.ControlDirector/waitMotionAcceptable',
        request_serializer=IndyMotion__pb2.Motion.SerializeToString,
        response_deserializer=IndyGeneral__pb2.BooleanMessage.FromString,
        )
    self.setMotionWaitTimeout = channel.unary_unary(
        '/IndyFramework.rpc.ControlDirector/setMotionWaitTimeout',
        request_serializer=IndyGeneral__pb2.DoubleMessage.SerializeToString,
        response_deserializer=IndyGeneral__pb2.EmptyMessage.FromString,
        )


class ControlDirectorServicer(object):
  """Motion queue managing service definition.
  """

  def changeSpeedRatio(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def enqueueMotion(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def enqueueMotionAvailable(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def enqueueMotionAcceptable(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def enqueuePriorityMotion(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def stopMotion(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def enqueueHome(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def enqueueZero(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def isMoving(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def isIdle(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def isMotionEmpty(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def isMotionFull(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def isMotionAcceptable(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def waitMotionDone(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def waitMotionAcceptable(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def setMotionWaitTimeout(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_ControlDirectorServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'changeSpeedRatio': grpc.unary_unary_rpc_method_handler(
          servicer.changeSpeedRatio,
          request_deserializer=IndyGeneral__pb2.DoubleMessage.FromString,
          response_serializer=IndyGeneral__pb2.EmptyMessage.SerializeToString,
      ),
      'enqueueMotion': grpc.unary_unary_rpc_method_handler(
          servicer.enqueueMotion,
          request_deserializer=IndyMotion__pb2.Motion.FromString,
          response_serializer=IndyMotion__pb2.MotionResult.SerializeToString,
      ),
      'enqueueMotionAvailable': grpc.unary_unary_rpc_method_handler(
          servicer.enqueueMotionAvailable,
          request_deserializer=IndyMotion__pb2.Motion.FromString,
          response_serializer=IndyMotion__pb2.MotionResult.SerializeToString,
      ),
      'enqueueMotionAcceptable': grpc.unary_unary_rpc_method_handler(
          servicer.enqueueMotionAcceptable,
          request_deserializer=IndyMotion__pb2.Motion.FromString,
          response_serializer=IndyMotion__pb2.MotionResult.SerializeToString,
      ),
      'enqueuePriorityMotion': grpc.unary_unary_rpc_method_handler(
          servicer.enqueuePriorityMotion,
          request_deserializer=IndyMotion__pb2.Motion.FromString,
          response_serializer=IndyMotion__pb2.MotionResult.SerializeToString,
      ),
      'stopMotion': grpc.unary_unary_rpc_method_handler(
          servicer.stopMotion,
          request_deserializer=IndyMotion__pb2.MotionStop.FromString,
          response_serializer=IndyGeneral__pb2.BooleanMessage.SerializeToString,
      ),
      'enqueueHome': grpc.unary_unary_rpc_method_handler(
          servicer.enqueueHome,
          request_deserializer=IndyMotion__pb2.Motion.FromString,
          response_serializer=IndyMotion__pb2.MotionResult.SerializeToString,
      ),
      'enqueueZero': grpc.unary_unary_rpc_method_handler(
          servicer.enqueueZero,
          request_deserializer=IndyMotion__pb2.Motion.FromString,
          response_serializer=IndyMotion__pb2.MotionResult.SerializeToString,
      ),
      'isMoving': grpc.unary_unary_rpc_method_handler(
          servicer.isMoving,
          request_deserializer=IndyGeneral__pb2.EmptyMessage.FromString,
          response_serializer=IndyGeneral__pb2.BooleanMessage.SerializeToString,
      ),
      'isIdle': grpc.unary_unary_rpc_method_handler(
          servicer.isIdle,
          request_deserializer=IndyGeneral__pb2.EmptyMessage.FromString,
          response_serializer=IndyGeneral__pb2.BooleanMessage.SerializeToString,
      ),
      'isMotionEmpty': grpc.unary_unary_rpc_method_handler(
          servicer.isMotionEmpty,
          request_deserializer=IndyGeneral__pb2.EmptyMessage.FromString,
          response_serializer=IndyGeneral__pb2.BooleanMessage.SerializeToString,
      ),
      'isMotionFull': grpc.unary_unary_rpc_method_handler(
          servicer.isMotionFull,
          request_deserializer=IndyGeneral__pb2.EmptyMessage.FromString,
          response_serializer=IndyGeneral__pb2.BooleanMessage.SerializeToString,
      ),
      'isMotionAcceptable': grpc.unary_unary_rpc_method_handler(
          servicer.isMotionAcceptable,
          request_deserializer=IndyMotion__pb2.Motion.FromString,
          response_serializer=IndyGeneral__pb2.BooleanMessage.SerializeToString,
      ),
      'waitMotionDone': grpc.unary_unary_rpc_method_handler(
          servicer.waitMotionDone,
          request_deserializer=IndyGeneral__pb2.EmptyMessage.FromString,
          response_serializer=IndyGeneral__pb2.BooleanMessage.SerializeToString,
      ),
      'waitMotionAcceptable': grpc.unary_unary_rpc_method_handler(
          servicer.waitMotionAcceptable,
          request_deserializer=IndyMotion__pb2.Motion.FromString,
          response_serializer=IndyGeneral__pb2.BooleanMessage.SerializeToString,
      ),
      'setMotionWaitTimeout': grpc.unary_unary_rpc_method_handler(
          servicer.setMotionWaitTimeout,
          request_deserializer=IndyGeneral__pb2.DoubleMessage.FromString,
          response_serializer=IndyGeneral__pb2.EmptyMessage.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'IndyFramework.rpc.ControlDirector', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
