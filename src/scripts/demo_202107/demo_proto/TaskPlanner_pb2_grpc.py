# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import TaskPlanner_pb2 as TaskPlanner__pb2


class TaskExecutorStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetRobotInfo = channel.unary_unary(
                '/TaskPlanner.TaskExecutor/GetRobotInfo',
                request_serializer=TaskPlanner__pb2.GetRobotInfoRequest.SerializeToString,
                response_deserializer=TaskPlanner__pb2.GetRobotInfoResponse.FromString,
                )
        self.DoDisinfection = channel.unary_unary(
                '/TaskPlanner.TaskExecutor/DoDisinfection',
                request_serializer=TaskPlanner__pb2.DoDisinfectionRequest.SerializeToString,
                response_deserializer=TaskPlanner__pb2.DoDisinfectionResponse.FromString,
                )
        self.GetRunningStatus = channel.unary_unary(
                '/TaskPlanner.TaskExecutor/GetRunningStatus',
                request_serializer=TaskPlanner__pb2.RunningStateRequest.SerializeToString,
                response_deserializer=TaskPlanner__pb2.RunningStateResponse.FromString,
                )


class TaskExecutorServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetRobotInfo(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DoDisinfection(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetRunningStatus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TaskExecutorServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetRobotInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.GetRobotInfo,
                    request_deserializer=TaskPlanner__pb2.GetRobotInfoRequest.FromString,
                    response_serializer=TaskPlanner__pb2.GetRobotInfoResponse.SerializeToString,
            ),
            'DoDisinfection': grpc.unary_unary_rpc_method_handler(
                    servicer.DoDisinfection,
                    request_deserializer=TaskPlanner__pb2.DoDisinfectionRequest.FromString,
                    response_serializer=TaskPlanner__pb2.DoDisinfectionResponse.SerializeToString,
            ),
            'GetRunningStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.GetRunningStatus,
                    request_deserializer=TaskPlanner__pb2.RunningStateRequest.FromString,
                    response_serializer=TaskPlanner__pb2.RunningStateResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'TaskPlanner.TaskExecutor', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class TaskExecutor(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetRobotInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/TaskPlanner.TaskExecutor/GetRobotInfo',
            TaskPlanner__pb2.GetRobotInfoRequest.SerializeToString,
            TaskPlanner__pb2.GetRobotInfoResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DoDisinfection(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/TaskPlanner.TaskExecutor/DoDisinfection',
            TaskPlanner__pb2.DoDisinfectionRequest.SerializeToString,
            TaskPlanner__pb2.DoDisinfectionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetRunningStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/TaskPlanner.TaskExecutor/GetRunningStatus',
            TaskPlanner__pb2.RunningStateRequest.SerializeToString,
            TaskPlanner__pb2.RunningStateResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
